name: CI/CD for TurboRepo with Docker

on:
  push:
    branches:
      - main # Hoặc branch bạn muốn theo dõi
  pull_request:
    branches:
      - main # Hoặc branch bạn muốn theo dõi

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js 22
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Nếu môi trường là production, chạy npm install thay vì pnpm
      - name: Install dependencies for production using npm
        if: github.ref == 'refs/heads/main'
        run: npm install

      - name: Install TurboRepo
        run: npm install --global turbo

      - name: Build Docker image for Next.js (client)
        run: |
          docker build -f DockerfileCI.client -t anhntserver/my-app-client:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push anhntserver/my-app-client:latest

      - name: SSH to deploy on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 171.248.147.82
          username: master
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat <<EOF > my-app-client-deployment.yaml
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: my-app-client
              labels:
                app: my-app-client
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: my-app-client
              template:
                metadata:
                  labels:
                    app: my-app-client
                spec:
                  containers:
                  - name: my-app-client
                    image: anhntserver/my-app-client:latest
                    ports:
                    - containerPort: 3002
            EOF

            cat <<EOF > my-app-client-service.yaml
            apiVersion: v1
            kind: Service
            metadata:
              name: my-app-client-service
            spec:
              selector:
                app: my-app-client
              ports:
                - port: 11001
                  targetPort: 3002
              type: LoadBalancer
            EOF
